openapi: 3.0.1

info:
  title: GoetheForum API
  description: API for the GoetheForum application.
  version: 1.0.0

servers:
  - url: 'https://localhost:3000'
    description: Local server

paths:
  # Register
  /account/register:
    post:
      summary: Register a new account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  minLength: 5
                  maxLength: 250
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  email:
                    type: string
                    format: email
                  user_id:
                    type: integer
                    format: int64
                  account_id:
                    type: integer
                    format: int64
                  access_token:
                    type: string
                    format: jwt
                  refresh_token:
                    type: string
                    format: jwt
                  user:
                    $ref: '#/components/schemas/User'
                required:
                  - email
                  - access_token
                  - account_id
                  - refresh_token
                  - user
                  - user_id
                  - username
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  # Login
  /account/login:
    post:
      summary: Log in to an account.
      description: "
      When mfa is enabled, the user must complete multiple steps to log in.
      After the first step, the user receives a token that must be used in the next step.
      The token contains the previous verification steps, as some verification methods are considered equivalent to others (e.g. backup codes and totp).
      "
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              allOf:
                - type: object
                  properties:
                    verification_type:
                      $ref: '#/components/schemas/VerificationType'
                - oneOf:
                    # Username
                    - type: object
                      title: Username with password
                      properties:
                        username:
                          type: string
                          example: user123
                        verification_type:
                          type: string
                          enum: [ password ]
                          example: password
                        password:
                          type: string
                          example: secret_password
                      required:
                        - username
                        - verification_type
                        - password
                    - type: object
                      title: Username with TOTP
                      properties:
                        username:
                          type: string
                          example: user123
                        verification_type:
                          type: string
                          enum: [ totp ]
                          example: totp
                        totp:
                          type: string
                          pattern: '^[0-9]{6}$'
                          example: 123456
                      required:
                        - username
                        - verification_type
                        - totp
                    - type: object
                      title: Username with backup code
                      properties:
                        username:
                          type: string
                          example: user123
                        verification_type:
                          type: string
                          enum: [ backup_code ]
                          example: backup_code
                        backup_code:
                          type: string
                          pattern: '^[a-zA-Z0-9]{16}$'
                          example: abcdef1234567890
                      required:
                        - username
                        - verification_type
                        - backup_code
                    - type: object
                      title: Username with email code
                      properties:
                        username:
                          type: string
                          example: user123
                        verification_type:
                          type: string
                          enum: [ email ]
                          example: email
                        email_code:
                          type: string
                          pattern: '^[a-zA-Z0-9]{6}$'
                          example: 123456
                      required:
                        - username
                        - verification_type
                        - email_code
                    # Email
                    - type: object
                      title: Email with password
                      properties:
                        email:
                          type: string
                          format: email
                          example: user@example.com
                        verification_type:
                          type: string
                          enum: [ password ]
                          example: password
                        password:
                          type: string
                          example: secret_password
                      required:
                        - email
                        - verification_type
                        - password
                    - type: object
                      title: Email with TOTP
                      properties:
                        email:
                          type: string
                          format: email
                          example: user@example.com
                        verification_type:
                          type: string
                          enum: [ totp ]
                          example: totp
                        totp:
                          type: string
                          pattern: '^[0-9]{6}$'
                          example: 123456
                      required:
                        - email
                        - verification_type
                        - totp
                    - type: object
                      title: Email with backup code
                      properties:
                        email:
                          type: string
                          format: email
                          example: user@example.com
                        verification_type:
                          type: string
                          enum: [ backup_code ]
                          example: backup_code
                        backup_code:
                          type: string
                          pattern: '^[a-zA-Z0-9]{16}$'
                          example: abcdef1234567890
                      required:
                        - email
                        - verification_type
                        - backup_code
                    - type: object
                      title: Email with email code
                      properties:
                        email:
                          type: string
                          format: email
                          example: user@example.com
                        verification_type:
                          type: string
                          enum: [ email ]
                          example: email
                        email_code:
                          type: string
                          pattern: '^[a-zA-Z0-9]{6}$'
                          example: 123456
                      required:
                        - email
                        - verification_type
                        - email_code
                    # Token
                    - type: object
                      title: Login token with password
                      description: The login token is used for an intermediate login step (e.g. when the user has 2FA enabled).
                      properties:
                        token:
                          type: string
                          format: jwt
                        verification_type:
                          type: string
                          enum: [ password ]
                          example: password
                        password:
                          type: string
                          example: secret_password
                      required:
                        - token
                        - verification_type
                        - password
                    - type: object
                      title: Login token with TOTP
                      description: The login token is used for an intermediate login step (e.g. when the user has 2FA enabled).
                      properties:
                        token:
                          type: string
                          format: jwt
                        verification_type:
                          type: string
                          enum: [ totp ]
                          example: totp
                        totp:
                          type: string
                          pattern: '^[0-9]{6}$'
                          example: 123456
                      required:
                        - token
                        - verification_type
                        - totp
                    - type: object
                      title: Login token with backup code
                      description: The login token is used for an intermediate login step (e.g. when the user has 2FA enabled).
                      properties:
                        token:
                          type: string
                          format: jwt
                        verification_type:
                          type: string
                          enum: [ backup_code ]
                          example: backup_code
                        backup_code:
                          type: string
                          pattern: '^[a-zA-Z0-9]{16}$'
                          example: abcdef1234567890
                      required:
                        - token
                        - verification_type
                        - backup_code
                    - type: object
                      title: Login token with email code
                      description: The login token is used for an intermediate login step (e.g. when the user has 2FA enabled).
                      properties:
                        token:
                          type: string
                          format: jwt
                        verification_type:
                          type: string
                          enum: [ email ]
                          example: email
                        email_code:
                          type: string
                          pattern: '^[a-zA-Z0-9]{6}$'
                          example: 123456
                      required:
                        - token
                        - verification_type
                        - email_code
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        enum: [ intermediary, complete ]
                    required:
                      - status
                  - type: object
                    oneOf:
                      - type: object
                        title: Intermediary
                        properties:
                          status:
                            type: string
                            enum: [ intermediary ]
                            example: intermediary
                          previous:
                            type: array
                            description: The verification types that have been used so far.
                            uniqueItems: true
                            items:
                              $ref: '#/components/schemas/VerificationType'
                          next:
                            type: array
                            description: The verification types that can be used next.
                            uniqueItems: true
                            items:
                              $ref: '#/components/schemas/VerificationType'
                          token:
                            type: string
                            format: jwt
                        required:
                          - status
                          - token
                          - next
                          - previous
                      - type: object
                        title: Complete
                        properties:
                          status:
                            type: string
                            enum: [ complete ]
                            example: complete
                          user:
                            $ref: '#/components/schemas/User'
                          access_token:
                            type: string
                            format: jwt
                          refresh_token:
                            type: string
                            format: jwt
                        required:
                          - status
                          - user
                          - refresh_token
                          - access_token


components:
  schemas:
    ErrorResponse:
      type: object
      description: An error response object. (None of the properties are guaranteed to be present.)
      properties:
        message:
          type: string
        type:
          type: string
        longMessage:
          type: string
        details:
          type: object
    User:
      type: object
      description: A user object. (Username and email may be null if the user is deleted (soft delete, for privacy reasons).)
      properties:
        ID:
          type: integer
          format: int64
        username:
          type: string
          description: Username may be null if the user is deleted.
        email:
          type: string
          format: email
          description: Email may be null if the user is deleted.
        role:
          $ref: '#/components/schemas/Role'
        displayName:
          type: string
        createdAt:
          type: object
          format: date-time
        deletedAt:
          type: object
          format: date-time
        bannedAt:
          type: object
          format: date-time
      required:
        - ID
        - role
        - displayName
        - createdAt
    Session:
      type: object
      description: A session object. (The token is not included in this object.)
      properties:
        ID:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        created:
          type: object
          format: date-time
        expires:
          type: object
          format: date-time
        lastUsed:
          type: object
          format: date-time
      required:
        - ID
        - userId
        - created
        - expires
        - lastUsed
    Role:
      type: string
      enum: [ UNVERIFIED, USER, MODERATOR, ADMIN, OWNER, SYSTEM ]
    VerificationType:
      type: string
      enum: [ password, totp, backup_code, email ]
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
